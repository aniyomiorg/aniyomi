import kotlin.Boolean;

CREATE TABLE anime_sync(
    _id INTEGER NOT NULL PRIMARY KEY,
    anime_id INTEGER NOT NULL,
    sync_id INTEGER NOT NULL,
    remote_id INTEGER NOT NULL,
    library_id INTEGER,
    title TEXT NOT NULL,
    last_episode_seen REAL NOT NULL,
    total_episodes INTEGER NOT NULL,
    status INTEGER NOT NULL,
    score REAL NOT NULL,
    remote_url TEXT NOT NULL,
    start_date INTEGER NOT NULL,
    finish_date INTEGER NOT NULL,
    private INTEGER AS Boolean DEFAULT 0 NOT NULL,
    UNIQUE (anime_id, sync_id) ON CONFLICT REPLACE,
    FOREIGN KEY(anime_id) REFERENCES animes (_id)
    ON DELETE CASCADE
);

delete:
DELETE FROM anime_sync
WHERE anime_id = :animeId AND sync_id = :syncId;

getAnimeTracks:
SELECT *
FROM anime_sync;

getTrackByAnimeId:
SELECT *
FROM anime_sync
WHERE _id = :id;


getTracksByAnimeId:
SELECT *
FROM anime_sync
WHERE anime_id = :animeId;

insert:
INSERT INTO anime_sync(anime_id,sync_id,remote_id,library_id,title,last_episode_seen,total_episodes,status,score,remote_url,start_date,finish_date,private)
VALUES (:animeId,:syncId,:remoteId,:libraryId,:title,:lastEpisodeSeen,:totalEpisodes,:status,:score,:remoteUrl,:startDate,:finishDate,:private);

update:
UPDATE anime_sync
SET
    anime_id = coalesce(:animeId, anime_id),
    sync_id = coalesce(:syncId, sync_id),
    remote_id = coalesce(:mediaId, remote_id),
    library_id = coalesce(:libraryId, library_id),
    title = coalesce(:title, title),
    last_episode_seen = coalesce(:lastEpisodeSeen, last_episode_seen),
    total_episodes = coalesce(:totalEpisodes, total_episodes),
    status = coalesce(:status, status),
    score = coalesce(:score, score),
    remote_url = coalesce(:trackingUrl, remote_url),
    start_date = coalesce(:startDate, start_date),
    finish_date = coalesce(:finishDate, finish_date),
    private = coalesce(:private, private)
WHERE _id = :id;
