import eu.kanade.tachiyomi.animesource.model.AnimeUpdateStrategy;
import kotlin.Boolean;
import kotlin.String;
import kotlin.collections.List;

CREATE TABLE animes(
    _id INTEGER NOT NULL PRIMARY KEY,
    source INTEGER NOT NULL,
    url TEXT NOT NULL,
    artist TEXT,
    author TEXT,
    description TEXT,
    genre TEXT AS List<String>,
    title TEXT NOT NULL,
    status INTEGER NOT NULL,
    thumbnail_url TEXT,
    favorite INTEGER AS Boolean NOT NULL,
    last_update INTEGER,
    next_update INTEGER,
    initialized INTEGER AS Boolean NOT NULL,
    viewer INTEGER NOT NULL,
    episode_flags INTEGER NOT NULL,
    cover_last_modified INTEGER NOT NULL,
    date_added INTEGER NOT NULL,
    update_strategy INTEGER AS AnimeUpdateStrategy NOT NULL DEFAULT 0,
    calculate_interval INTEGER DEFAULT 0 NOT NULL,
    last_modified_at INTEGER NOT NULL DEFAULT 0,
    favorite_modified_at INTEGER,
    version INTEGER NOT NULL DEFAULT 0,
    is_syncing INTEGER NOT NULL DEFAULT 0
);

CREATE INDEX animelib_favorite_index ON animes(favorite) WHERE favorite = 1;
CREATE INDEX animes_url_index ON animes(url);

CREATE TRIGGER update_last_favorite_at_animes
AFTER UPDATE OF favorite ON animes
BEGIN
  UPDATE animes
  SET favorite_modified_at = strftime('%s', 'now')
  WHERE _id = new._id;
END;

CREATE TRIGGER update_last_modified_at_animes
AFTER UPDATE ON animes
FOR EACH ROW
BEGIN
  UPDATE animes
  SET last_modified_at = strftime('%s', 'now')
  WHERE _id = new._id;
END;

CREATE TRIGGER update_anime_version AFTER UPDATE ON animes
BEGIN
    UPDATE animes SET version = version + 1
    WHERE _id = new._id AND new.is_syncing = 0 AND (
        new.url != old.url OR
        new.description != old.description OR
        new.favorite != old.favorite
    );
END;

getAnimeById:
SELECT *
FROM animes
WHERE _id = :id;

-- TODO: this should ideally never really have more than 1 result
getAnimeByUrlAndSource:
SELECT *
FROM animes
WHERE url = :url AND source = :source
LIMIT 1;

getFavorites:
SELECT *
FROM animes
WHERE favorite = 1;

getWatchedAnimeNotInLibrary:
SELECT *
FROM animes
WHERE favorite = 0 AND _id IN (
    SELECT DISTINCT episodes.anime_id
    FROM episodes
    WHERE seen = 1 OR last_second_seen != 0
);

getAllAnime:
SELECT *
FROM animes;

getAllAnimeSourceAndUrl:
SELECT source, url
FROM animes;

getAnimesWithFavoriteTimestamp:
SELECT *
FROM animes
WHERE favorite_modified_at IS NOT NULL;

getAnimeSourceIdWithFavoriteCount:
SELECT
source,
count(*)
FROM animes
WHERE favorite = 1
GROUP BY source;

getFavoriteBySourceId:
SELECT *
FROM animes
WHERE favorite = 1
AND source = :sourceId;

getDuplicateLibraryAnime:
SELECT *
FROM animes
WHERE favorite = 1
AND LOWER(title) = :title
AND _id != :id;

getUpcomingAnime:
SELECT *
FROM animes
WHERE next_update >= :startOfDay
AND favorite = 1
AND status IN :statuses
ORDER BY next_update ASC;

resetViewerFlags:
UPDATE animes
SET viewer = 0;

resetIsSyncing:
UPDATE animes
SET is_syncing = 0
WHERE is_syncing = 1;

getSourceIdsWithNonLibraryAnime:
SELECT source, COUNT(*) AS anime_count
FROM animes
WHERE favorite = 0
GROUP BY source;

deleteAnimesNotInLibraryBySourceIds:
DELETE FROM animes
WHERE favorite = 0 AND source IN :sourceIds;

insert:
INSERT INTO animes(source, url, artist, author, description, genre, title, status, thumbnail_url, favorite, last_update, next_update, initialized, viewer, episode_flags, cover_last_modified, date_added, update_strategy, calculate_interval, last_modified_at, version)
VALUES (:source, :url, :artist, :author, :description, :genre, :title, :status, :thumbnailUrl, :favorite, :lastUpdate, :nextUpdate, :initialized, :viewerFlags, :episodeFlags, :coverLastModified, :dateAdded, :updateStrategy, :calculateInterval, 0, :version);

update:
UPDATE animes SET
    source = coalesce(:source, source),
    url = coalesce(:url, url),
    artist = coalesce(:artist, artist),
    author = coalesce(:author, author),
    description = coalesce(:description, description),
    genre = coalesce(:genre, genre),
    title = coalesce(:title, title),
    status = coalesce(:status, status),
    thumbnail_url = coalesce(:thumbnailUrl, thumbnail_url),
    favorite = coalesce(:favorite, favorite),
    last_update = coalesce(:lastUpdate, last_update),
    next_update = coalesce(:nextUpdate, next_update),
    initialized = coalesce(:initialized, initialized),
    viewer = coalesce(:viewer, viewer),
    episode_flags = coalesce(:episodeFlags, episode_flags),
    cover_last_modified = coalesce(:coverLastModified, cover_last_modified),
    date_added = coalesce(:dateAdded, date_added),
    update_strategy = coalesce(:updateStrategy, update_strategy),
    calculate_interval = coalesce(:calculateInterval, calculate_interval),
    version = coalesce(:version, version),
    is_syncing = coalesce(:isSyncing, is_syncing)
WHERE _id = :animeId;

selectLastInsertedRowId:
SELECT last_insert_rowid();
