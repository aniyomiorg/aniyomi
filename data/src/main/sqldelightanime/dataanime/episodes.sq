import kotlin.Boolean;

CREATE TABLE episodes(
    _id INTEGER NOT NULL PRIMARY KEY,
    anime_id INTEGER NOT NULL,
    url TEXT NOT NULL,
    name TEXT NOT NULL,
    scanlator TEXT,
    seen INTEGER AS Boolean NOT NULL,
    bookmark INTEGER AS Boolean NOT NULL,
    last_second_seen INTEGER NOT NULL,
    total_seconds INTEGER NOT NULL,
    episode_number REAL NOT NULL,
    source_order INTEGER NOT NULL,
    date_fetch INTEGER NOT NULL,
    date_upload INTEGER NOT NULL,
    last_modified_at INTEGER NOT NULL DEFAULT 0,
    version INTEGER NOT NULL DEFAULT 0,
    is_syncing INTEGER NOT NULL DEFAULT 0,
    summary TEXT,
    preview_url TEXT,
    fillermark INTEGER AS Boolean NOT NULL,
    FOREIGN KEY(anime_id) REFERENCES animes (_id)
    ON DELETE CASCADE
);

CREATE INDEX episodes_anime_id_index ON episodes(anime_id);
CREATE INDEX episodes_unseen_by_anime_index ON episodes(anime_id, seen) WHERE seen = 0;

CREATE TRIGGER update_last_modified_at_episodes
AFTER UPDATE ON episodes
FOR EACH ROW
BEGIN
  UPDATE episodes
  SET last_modified_at = strftime('%s', 'now')
  WHERE _id = new._id;
END;

CREATE TRIGGER update_episode_and_anime_version AFTER UPDATE ON episodes
WHEN new.is_syncing = 0 AND (
    new.seen != old.seen OR
    new.bookmark != old.bookmark OR
    new.last_second_seen != old.last_second_seen
)
BEGIN
    -- Update the episode version
    UPDATE episodes SET version = version + 1
    WHERE _id = new._id;

    -- Update the anime version
    UPDATE animes SET version = version + 1
    WHERE _id = new.anime_id AND (SELECT is_syncing FROM animes WHERE _id = new.anime_id) = 0;
END;

getEpisodeById:
SELECT *
FROM episodes
WHERE _id = :id;

getEpisodesByAnimeId:
SELECT *
FROM episodes
WHERE anime_id = :animeId;

getBookmarkedEpisodesByAnimeId:
SELECT *
FROM episodes
WHERE bookmark
AND anime_id = :animeId;


getEpisodeByUrl:
SELECT *
FROM episodes
WHERE url = :episodeUrl;

getEpisodeByUrlAndAnimeId:
SELECT *
FROM episodes
WHERE url = :episodeUrl
AND anime_id = :animeId;

removeEpisodesWithIds:
DELETE FROM episodes
WHERE _id IN :episodeIds;

resetIsSyncing:
UPDATE episodes
SET is_syncing = 0
WHERE is_syncing = 1;

insert:
INSERT INTO episodes(anime_id, url, name, scanlator, seen, bookmark, last_second_seen, total_seconds, episode_number, source_order, date_fetch, date_upload, last_modified_at, version, is_syncing, summary, preview_url, fillermark)
VALUES (:animeId, :url, :name, :scanlator, :seen, :bookmark, :lastSecondSeen, :totalSeconds, :episodeNumber, :sourceOrder, :dateFetch, :dateUpload, 0, :version, 0, :summary, :previewUrl, :fillermark);

update:
UPDATE episodes
SET anime_id = coalesce(:animeId, anime_id),
    url = coalesce(:url, url),
    name = coalesce(:name, name),
    scanlator = coalesce(:scanlator, scanlator),
    seen = coalesce(:seen, seen),
    bookmark = coalesce(:bookmark, bookmark),
    last_second_seen = coalesce(:lastSecondSeen, last_second_seen),
    total_seconds = coalesce(:totalSeconds, total_seconds),
    episode_number = coalesce(:episodeNumber, episode_number),
    source_order = coalesce(:sourceOrder, source_order),
    date_fetch = coalesce(:dateFetch, date_fetch),
    date_upload = coalesce(:dateUpload, date_upload),
    version = coalesce(:version, version),
    is_syncing = coalesce(:isSyncing, is_syncing),
    summary = coalesce(:summary, summary),
    preview_url = coalesce(:previewUrl, preview_url),
    fillermark = coalesce(:fillermark, fillermark)
WHERE _id = :episodeId;

selectLastInsertedRowId:
SELECT last_insert_rowid();
